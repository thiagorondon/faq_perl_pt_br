=encoding utf-8

=head0 Questões sobre a linguagem Perl

=head1 Questões sobre a linguagem Perl

=head2 Como eu crio uma classe ?

(TBR) (01/10/2011) - (baseado na tradução do perlfaq) Em Perl, classes são apenas pacotes e métodos são apenas funções. Perl não tem nada formal além disto para este caso, não há nenhuma "configuração" pre-estabelecida para um pacote, você pode fazer o que bem entender com ele. A documentação do Perl tem vários documentos que cobrem este assunto, tais como perlboot (Tutorial Barnyard Object Oriented), perltoot (Tom Tutorial objeto Oriented), perlbot (Truques Bag o 'Object), e perlobj.

=head2 Qual a diferença de invocar uma função como &foo ou foo() ?

(TBR) (01/10/2011) - (baseado na tradução do perlfaq) Invocar uma função como "&foo" sem parenteses, ignora o prototipo de "foo" e repassar o valor atual da lista de argumentos, @_. Veja um exemplo, onde a função "bar" chama por "&foo", e irá permamecer com os valores repassados para bar.


               sub bar { &foo }

               sub foo { print "Args in foo are: @_\n" }

               bar( qw( a b c ) );


Quando você invocar "bar" com argumentos, você irá ver que os argumentos repassados para "foo", serão os mesmos presentes em @_. 
                
                Os argumentos em foo são: a b c

Chamando a função com parenteses, com ou sem argumentos, não irá fazer com que o atual @_ seja utilizado. Alterando o exemplo, e adicionando parenteses para invocar "foo", veja qual será o resultado:

               sub bar { &foo() }

               sub foo { print "Args in foo are: @_\n" }

               bar( qw( a b c ) );


Agora a saída de "foo", não terá o @_ de quem o invocou.

                Os argumentos em foo são:

A principal função de usar a característica do @_, é para escrever funções que serão invocadas pelo objetivo principal. Para mais detalhes veja a documentação "perlsub".
')

=head2 Como criar um módulo ?

(TBR) (05/10/2011) - Há vários manuais disponíveis para auxiliar na criação de módulos, são eles: perlmod, perlmodlib, perlmodstyle e perlnewmod. Além da documentação, há módulos para ajudar na criação de módulos, tais como L<ExtUtils::ModuleMaker> e L<Module::Starter>, e caso você precise utilizar da linguagem C, veja mais informações sobre o L<h2xs>.

Há também gerenciadores mais esperto para lídar com seu módulo, veja também o L<Dist::Zill> e o L<Shipit>.

=head2  Como eu crio um select/case/switch eficiente em perl?

(EDE) (06/10/2011) - A linguagem tem suporte nativo a esse tipo de construção desde a versão 5.10:

    given($status) {
      when(/^404$/) { print "página não encontrada\n" }
      when(/^500$/) { print "erro no servidor\n" }
      when(/^302$/) { print "você foi redirecionado\n" }
      default       { print ""resposta desconhecida" }
    }

O problema com esse tipo de abordagem é que para valores '302', o teste vai sempre passar pelo teste de '404' e '500', e falhar antes de testar positivamente, quanto mais valores possíveis, mais testes redundantes são executados. O pior caso é quando você cai no valor default onde todos os testes são executados.

Esse problema pode ser resolvido com uma construção um pouco menos legível mas muito mais eficiente, usando uma tabela de dispatch, da seguinte forma:

    ({
         404 => sub { print "página não encontrada\n" },
         500 => sub { print "erro no servidor\n" },
         302 => sub { print "você foi redirecionado\n" }
    }->{$status} or sub { print "resposta desconhecida" })->()

Isso fará com que apenas uma operação de lookup seja executada, qualquer que seja o valor de $status, sendo assim, bem mais eficiente do que usar a construção given/when. Obviamente isso só funciona quando se deseja comparações exatas de valores, caso você precise casar com uma regex para fazer o dispatch, a solução é usar given/when.


