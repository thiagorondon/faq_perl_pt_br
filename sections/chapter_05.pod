=encoding utf-8

=head0 Manipulação de dados

=head1 Manipulação de dados

=head2 Como reconhecer e processar estruturas textuais relativamente complexas? Ex: fórmulas matemáticas como: z^2 = ((1^(sqrt(zx))/(x^(x*y)))/e-(xy-235)^(1/2))/(8-(x^(y-1)))

(GAB) (30/09/2011) - Você pode se arriscar construir uma expressão regular imensa, que muito provavelmente só funcionará para um subconjunto limitado da estrutura do texto de entrada, ou pode usar o módulo Regexp::Grammars (https://metacpan.org/module/Regexp::Grammars).

Com ele é possível processar estruturas textuais complexas, hierárquicas e até recursivas. O Regexp::Grammars se aproveita de algumas novas funcionalidades introduzidas no Perl 5.10 para adicionar algumas extensões nas expressões regulares permitindo definir a estrutura dos dados de entrada usando construções em forma de gramáticas (http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm).

No fim da operação você tem disponível na variável %/ seus dados hierarquicamente representados numa estrutura em árvore de hashes aninhados.

Vale a pena dar uma olhada nos exemplos da documentação e na pasta demo/ presente no diretório raiz do módulo.

=head2 Tem uma forma rápida de verificar/manipular um valor dentro de um hash ou array sem usar uma variável temporária?

(EDE) (06/10/2011) - A forma tradicional de validar um valor dentro de um hash é usando uma variável temporária para evitar o trabalho de referenciar o valor toda hora:

    my $hash = { int => 20, str => 'blah' };

    my $int = $hash->{int};
    return defined $int
     and length $int
     and $int =~ /^\d$/;

Isso tudo pode ser encurtado para:

    return defined and length
        for $hash->{int};

Você também fazer modificações dentro do hash, já que o for cria um alias. Por exemplo, para remover os espaços do começo da string,
substituir ' ' por '_', remover o último "\n" e depois imprimir, mas só se a string resultante tiver mais de 10 caracteres:

    s/^\s*//, tr/ /_/, chomp, length > 10 and print for $hash->{str};

Uma das vantagens de se usar for invés de uma atribuição diretamente para a variável $_ é que o for declara $_ como local automaticamente antes de criar o alias, assim você não corre o risco de pisotear algum valor pré-existente.

=head2 Como verificar se um valor está dentro de um array?

(WAL) (15/10/2011) - Uma das formas de se fazer tal verificação é percorrendo
sequencialmente todos os valores dentro do seu array até que se defina ou não
a sua presença. Exemplo:

    return grep { $valor eq $_ } @array;

Uma forma melhorada disto seria usar uma hashtable (ou hashmap):

    return { map { $_ => 1 } @array }->{$valor};

desta forma, não importa a quantidade de itens que você tem dentro do @array
pois o lookup do valor terá custo constante no pior caso.
